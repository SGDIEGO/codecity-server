generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserRole {
  id               String @id @default(uuid())
  min_interactions Int
  name             String
  users            User[]
}

model User {
  id                  String                @id @default(uuid())
  name                String?               @unique
  email               String                @unique
  password            String                @db.VarChar(200)
  profile_url         String?
  user_role_id        String
  interactions        Int                   @default(0)
  Forum               Forum[]
  Message             Message[]
  MessageInteractions MessageInteractions[]
  Payments            Payments[]
  Thread              Thread[]
  user_role           UserRole              @relation(fields: [user_role_id], references: [id])
}

model Forum {
  id            String   @id @default(uuid())
  name          String   @unique
  creation_date DateTime @default(now())
  creator_id    String
  creator       User     @relation(fields: [creator_id], references: [id])
  Thread        Thread[]
}

model Thread {
  id            String     @id @default(uuid())
  name          String?    @unique
  creation_date DateTime   @default(now())
  private       Boolean    @default(false)
  access_price  Float?
  image_url     String?
  forum_id      String
  user_id       String
  Message       Message[]
  Payments      Payments[]
  forum         Forum      @relation(fields: [forum_id], references: [id])
  user          User       @relation(fields: [user_id], references: [id])
}

model Message {
  id                  String                @id @default(uuid())
  content             String                @db.VarChar(500)
  likes               Int                   @default(0)
  dislikes            Int                   @default(0)
  parent_message_id   String?
  thread_id           String
  user_id             String
  parent_message      Message?              @relation("MessageToMessage", fields: [parent_message_id], references: [id])
  message             Message[]             @relation("MessageToMessage")
  thread              Thread                @relation(fields: [thread_id], references: [id])
  user                User                  @relation(fields: [user_id], references: [id])
  MessageInteractions MessageInteractions[]
}

model MessageInteractions {
  id             String      @id @default(uuid())
  interaction_id String
  user_id        String
  message_id     String
  interaction    Interaction @relation(fields: [interaction_id], references: [id])
  message        Message     @relation(fields: [message_id], references: [id])
  user           User        @relation(fields: [user_id], references: [id])
}

model Interaction {
  id                  String                @id @default(uuid())
  type                String                @unique
  MessageInteractions MessageInteractions[]
}

model Payments {
  id                String   @id @default(uuid())
  start_access_date DateTime @default(now())
  end_access_date   DateTime
  thread_id         String
  user_id           String
  thread            Thread   @relation(fields: [thread_id], references: [id])
  user              User     @relation(fields: [user_id], references: [id])
}
